// components/Contact.tsx

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import PrivacyPolicyModal from './PrivacyPolicyModal';
import Image from 'next/image';
import { motion } from 'framer-motion';

type Info = {
  access_key: string;
  subject: string;
  from_name: string;
  botcheck: string;
  name: string;
  email: string;
  message: string;
  topic: string;
  orderNumber: string;
};

export default function Contact() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isChecked, setIsChecked] = useState(true);
  const [isSuccess, setIsSuccess] = useState(false);

  const {
    register,
    watch,
    handleSubmit,
    reset,
    formState: { errors, isSubmitSuccessful, isSubmitting },
  } = useForm<Info>({
    mode: 'onSubmit',
  });

  const topic = watch('topic');

  const getMessagePlaceholder = (topic: string) => {
    const placeholders: { [key: string]: string } = {
      '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏–±–æ—Ä–∞':
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–∏–±–æ—Ä–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–∞–∫—É—é –∫–∞–∫ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, ACTIVATION ID –∏ —Ç.–ø.',
      '–ü–æ–º–æ—â—å —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ü–û':
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –£—Ç–æ—á–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å –ø—Ä–∏–±–æ—Ä–∞ –∏ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –º—ã –º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ü–û.',
      '–ó–∞–∫–∞–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è':
        '–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–∏–±–æ—Ä–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–∫ —Å –Ω–∞—à–∏—Ö —Å–∫–ª–∞–¥–æ–≤ –≤ –ú–æ—Å–∫–≤–µ, —Ç–∞–∫ –∏ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –ª—É—á—à–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –ö–∏—Ç–∞—è. –£ –Ω–∞—Å –µ—Å—Ç—å –≤—Å—ë, —á—Ç–æ –≤–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, –∏ —ç—Ç–æ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.',
    };
    return placeholders[topic] || '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
  };

  const onSubmit = async (data: Info) => {
    try {
      const response = await fetch('https://api.web3forms.com/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        body: JSON.stringify(data),
      });
      
      const json = await response.json();
      
      if (response.ok && json.success) {
        setIsSuccess(true);
        reset();
      } else {
        setIsSuccess(false);
      }
    } catch (error) {
      setIsSuccess(false);
      console.error(error);
    }
  };

  return (
    <div className="bg-white dark:bg-neutral-900 mt-6" id="contact">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-16 text-center">
        <motion.h2
          className="text-4xl font-extrabold text-black dark:text-white"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üì©
        </motion.h2>

        <motion.p
          className="pt-6 text-lg max-w-2xl text-center m-auto text-gray-700 dark:text-gray-300"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          –ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,
          –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏,
          –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ, –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞
          –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã, –∏ –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 12 —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤.
        </motion.p>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-8 pb-16 grid md:grid-cols-2 gap-y-8 md:gap-x-8">
        {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
        <div className="bg-gray-50 dark:bg-gray-800 p-6 rounded-lg shadow-lg">
          <h2 className="text-lg font-bold text-center mb-6">üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</h2>

          <div className="mb-6">
            <h3 className="text-md font-semibold mb-2 text-red-600">–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</h3>
            <div className="text-sm text-gray-700 dark:text-gray-300">
              <p>üïë –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: 10:00 - 19:00 (–ú–°–ö)</p>
              <p>üïë –°—É–±–±–æ—Ç–∞ - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 10:00 - 18:00 (–ú–°–ö)</p>
            </div>
          </div>

          <hr className="border-gray-300 dark:border-gray-700 mb-6" />

          <div className="mb-6">
            <h3 className="text-md font-semibold mb-4 text-red-600">–ú—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö:</h3>
            <div className="flex justify-center space-x-8">
              <ContactInfo
                href="https://—Å–º–∞—Ä—Ç–¥–∏–∞–≥-–ø–æ–¥–¥–µ—Ä–∂–∫–∞.—Ä—Ñ/telegram"
                imageSrc="/images/hero/telegram-qr.svg"
                alt="QR Code Telegram"
                platform="Telegram"
                icon={
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    className="text-blue-500"
                    style={{
                      fillRule: 'evenodd',
                      clipRule: 'evenodd',
                      strokeLinejoin: 'round',
                      strokeMiterlimit: 1.41421,
                      fill: 'currentColor',
                    }}
                  >
                    <path
                      d="M18.384,15a1.992,1.992,0,0,0,.1-1c0-.3-.05-.59-.14-.87l2.12-1.65a.5.5,0,0,0,.11-.7l-2-3.464a.5.5,0,0,0-.6-.2l-2.49,1a7.014,7.014,0,0,0-1.6-.93l-.38-2.65A.5.5,0,0,0,14,4h-4a.5.5,0,0,0-.5.42l-.38,2.65c-.56.24-1.09.56-1.6.93l-2.49-1a.5.5,0,0,0-.6.22l-2,3.464a.5.5,0,0,0,.12.63l2.12,1.65c-.09.28-.14.58-.14.87 0,.3.05,.59.14,.87l-2.12,1.65a.5.5,0,0,0-.12.63l2,3.464c.12.2.38.3.6.2l2.49-1c.51.37,1.04.69,1.6.93l.38,2.65c.04,.23,.24,.42,.5,.42h4c.26,0,.46-.19,.5-.42l.38-2.65c.56-.24,1.09-.56,1.6-.93l2.49,1c.22,.1,.48,0,.6-.2l2-3.464a.5.5,0,0,0-.12-.63l-2.12-1.65c.09-.28,.14-.58,.14-.87Zm-7.14,2.564a3,3,0,1,1,3-3A3,3,0,0,1,12,15.5Z"
                    />
                  </svg>
                }
                hoverColor="hover:text-blue-500"
              />
              <ContactInfo
                href="https://—Å–º–∞—Ä—Ç–¥–∏–∞–≥-–ø–æ–¥–¥–µ—Ä–∂–∫–∞.—Ä—Ñ/whatsapp"
                imageSrc="/images/hero/whatsapp-qr.svg"
                alt="QR Code WhatsApp"
                platform="WhatsApp"
                icon={
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    className="text-green-500"
                    style={{ fill: 'currentColor' }}
                  >
                    <path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.893 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.884-.001 2.225.651 3.891 1.746 5.634l-.999 3.648 3.742-.981zm11.387-5.464c-.074-.124-.272-.198-.57-.347-.297-.149-1.758-.868-2.031-.967-.272-.099-.47-.149-.669.149-.198.297-.768.967-.941 1.165-.173.198-.347.223-.644.074-.297-.149-1.255-.462-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.297-.347.446-.521.151-.172.2-.296.3-.495.099-.198.05-.372-.025-.521-.075-.148-.669-1.611-.916-2.206-.242-.579-.487-.501-.669-.51l-.57-.01c-.198 0-.52.074-.792.372s-1.04 1.016-1.04 2.479 1.065 2.876 1.213 3.074c.149.198 2.095 3.2 5.076 4.487.709.306 1.263.489 1.694.626.712.226 1.36.194 1.872.118.571-.085 1.758-.719 2.006-1.413.248-.695.248-1.29.173-1.414z" />
                  </svg>
                }
                hoverColor="hover:text-green-500"
              />
            </div>
          </div>

          <hr className="border-gray-300 dark:border-gray-700 mb-6" />

          <div className="mb-6">
            <h3 className="text-md font-semibold mb-2 text-red-600">Email –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂:</h3>
            <p className="text-sm text-gray-700 dark:text-gray-300">
              <a href="mailto:sales@—Å–º–∞—Ä—Ç–¥–∏–∞–≥.—Ä—Ñ" className="text-blue-600 hover:underline">
                sales@—Å–º–∞—Ä—Ç–¥–∏–∞–≥.—Ä—Ñ
              </a>
            </p>
          </div>

          <div className="mb-6">
            <h3 className="text-md font-semibold mb-2 text-red-600">Email —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</h3>
            <p className="text-sm text-gray-700 dark:text-gray-300">
              <a href="mailto:support@—Å–º–∞—Ä—Ç–¥–∏–∞–≥.—Ä—Ñ" className="text-blue-600 hover:underline">
                support@—Å–º–∞—Ä—Ç–¥–∏–∞–≥.—Ä—Ñ
              </a>
            </p>
          </div>

          <hr className="border-gray-300 dark:border-gray-700 mb-6" />

          <div>
            <h3 className="text-md font-semibold mb-2 text-red-600">–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏:</h3>
            <p className="text-sm text-gray-700 dark:text-gray-300">üìç –≥. –¢–æ–ª—å—è—Ç—Ç–∏, —É–ª. –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è 68</p>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å —Ñ–æ—Ä–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ */}
        <div className="bg-gray-50 dark:bg-gray-800 p-6 rounded-lg shadow-lg">
          <h2 className="text-lg font-extrabold text-center mb-5">‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</h2>
          {!isSubmitSuccessful && (
            <form onSubmit={handleSubmit(onSubmit)}>
              <input type="hidden" value="c39d2187-6537-4c0b-87e1-3cff0bf0c1c3" {...register('access_key')} />
              <input
                type="hidden"
                value="–û–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Å–∞–π—Ç–µ SmartDiag"
                {...register('subject')}
              />
              <input type="hidden" value="SmartDiag" {...register('from_name')} />
              <input type="checkbox" className="hidden" {...register('botcheck')} />

              <InputField
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è"
                error={errors.name}
                register={register('name', {
                  required: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –í–∞—à–µ –∏–º—è',
                  maxLength: 80,
                })}
              />

              <InputField
                type="email"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –í–∞—à Email"
                error={errors.email}
                register={register('email', {
                  required: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –í–∞—à Email',
                  pattern: {
                    value: /^\S+@\S+$/i,
                    message: '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã',
                  },
                })}
              />

              <SelectField
                id="topic"
                options={[
                  { value: '', label: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è' },
                  { value: '–í–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ', label: '–í–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ' },
                  { value: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏–±–æ—Ä–∞', label: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏–±–æ—Ä–∞' },
                  { value: '–ü–æ–º–æ—â—å —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ü–û', label: '–ü–æ–º–æ—â—å —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ü–û' },
                  { value: '–ó–∞–∫–∞–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', label: '–ó–∞–∫–∞–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' },
                  { value: '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', label: '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ' },
                  { value: '–î—Ä—É–≥–æ–µ', label: '–î—Ä—É–≥–æ–µ' },
                ]}
                error={errors.topic}
                register={register('topic', {
                  required: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è',
                })}
              />

              {(topic === '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏–±–æ—Ä–∞' || topic === '–ü–æ–º–æ—â—å —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ü–û') && (
                <InputField
                  type="text"
                  placeholder="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"
                  error={errors.orderNumber}
                  register={register('orderNumber', {
                    required: '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                  })}
                />
              )}

              <TextArea
                placeholder={getMessagePlaceholder(topic)}
                error={errors.message}
                register={register('message', {
                  required: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
                })}
              />

              <div className="flex items-center mb-4 mt-4">
                <input
                  type="checkbox"
                  id="agree"
                  className="mr-2 cursor-pointer rounded text-red-600 focus:ring-red-500 bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-700"
                  checked={isChecked}
                  onChange={(e) => setIsChecked(e.target.checked)}
                  required
                />
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –∏ —Å–æ–≥–ª–∞—Å–µ–Ω —Å{' '}
                  <button
                    type="button"
                    onClick={() => setIsModalOpen(true)}
                    className="text-red-600 hover:underline"
                  >
                    –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                  </button>
                </span>
              </div>

              <button
                type="submit"
                className="w-full py-3 font-semibold text-white bg-red-600 rounded-md transition duration-300 hover:bg-red-700 focus:outline-none focus:ring-4 focus:ring-red-300"
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <svg
                    className="w-5 h-5 mx-auto text-white animate-spin"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle
                      className="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      strokeWidth="4"
                    />
                    <path
                      className="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    />
                  </svg>
                ) : (
                  '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
                )}
              </button>
            </form>
          )}
          {isSubmitSuccessful && isSuccess && <SuccessMessage onReset={reset} />}
          {isSubmitSuccessful && !isSuccess && <ErrorMessage onReset={reset} />}
        </div>
      </div>
      <PrivacyPolicyModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
      />
    </div>
  );
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ContactInfo —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
interface ContactInfoProps {
  href: string;
  imageSrc: string;
  alt: string;
  platform: string;
  icon: JSX.Element;
  hoverColor: string;
}

const ContactInfo: React.FC<ContactInfoProps> = ({
  href,
  imageSrc,
  alt,
  platform,
  icon,
  hoverColor,
}) => (
  <div className="flex flex-col items-center space-y-2">
    <div className="flex items-center space-x-2">
      <span className={`${hoverColor}`}>{icon}</span>
      <a
        href={href}
        target="_blank"
        rel="noopener noreferrer"
        className={`transition-colors duration-300 ${hoverColor} font-semibold`}
      >
        {platform}
      </a>
    </div>
    <div>
      <a href={href} target="_blank" rel="noopener noreferrer">
        <Image
          src={imageSrc}
          alt={alt}
          className="rounded-lg transition-transform duration-300 ease-in-out transform hover:scale-110"
          width={100}
          height={100}
        />
      </a>
    </div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç InputField —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
interface InputFieldProps {
  type: string;
  placeholder: string;
  error: any;
  register: any;
}

const InputField: React.FC<InputFieldProps> = ({ type, placeholder, error, register }) => (
  <div className="mb-4 mt-4">
    <input
      type={type}
      placeholder={placeholder}
      autoComplete="off"
      className={`w-full rounded-md shadow-sm border-gray-300 dark:border-gray-700 focus:ring-red-500 focus:border-red-500
        ${error ? 'border-rose-500' : ''}
        bg-white dark:bg-gray-800
        text-gray-900 dark:text-gray-100
        placeholder-gray-400 dark:placeholder-gray-500`}
      {...register}
    />
    {error && (
      <div className="mt-1 text-rose-500">
        <small>{error.message}</small>
      </div>
    )}
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç SelectField —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
interface SelectFieldProps {
  id: string;
  options: { value: string; label: string }[];
  error: any;
  register: any;
}

const SelectField: React.FC<SelectFieldProps> = ({ id, options, error, register }) => (
  <div className="mb-4 mt-4">
    <select
      id={id}
      className={`w-full rounded-md shadow-sm border-gray-300 dark:border-gray-700 focus:ring-red-500 focus:border-red-500
        ${error ? 'border-rose-500' : ''}
        bg-white dark:bg-gray-800
        text-gray-900 dark:text-gray-100`}
      {...register}
    >
      {options.map((option) => (
        <option key={option.value} value={option.value}>
          {option.label}
        </option>
      ))}
    </select>
    {error && (
      <div className="mt-1 text-rose-500">
        <small>{error.message}</small>
      </div>
    )}
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç TextArea —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
interface TextAreaProps {
  placeholder: string;
  error: any;
  register: any;
}

const TextArea: React.FC<TextAreaProps> = ({ placeholder, error, register }) => (
  <div className="mb-4 mt-4">
    <textarea
      placeholder={placeholder}
      className={`w-full rounded-md shadow-sm border-gray-300 dark:border-gray-700 focus:ring-red-500 focus:border-red-500
        ${error ? 'border-rose-500' : ''}
        bg-white dark:bg-gray-800
        text-gray-900 dark:text-gray-100
        placeholder-gray-400 dark:placeholder-gray-500`}
      rows={4}
      {...register}
    />
    {error && (
      <div className="mt-1 text-rose-500">
        <small>{error.message}</small>
      </div>
    )}
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç SuccessMessage
interface MessageProps {
  onReset: () => void;
}

const SuccessMessage: React.FC<MessageProps> = ({ onReset }) => (
  <div className="flex flex-col items-center justify-center text-center text-white rounded-md">
    <svg
      width="100"
      height="100"
      className="text-green-500"
      viewBox="0 0 100 100"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M26.6666 50L46.6666 66.6667L73.3333 33.3333M50 96.6667C43.8716 96.6667 37.8033 95.4596 32.1414 93.1144C26.4796 90.7692 21.3351 87.3317 17.0017 82.9983C12.6683 78.6649 9.23082 73.5204 6.8856 67.8586C4.54038 62.1967 3.33331 56.1283 3.33331 50C3.33331 43.8716 4.54038 37.8033 6.8856 32.1414C9.23082 26.4796 12.6683 21.3351 17.0017 17.0017C21.3351 12.6683 26.4796 9.23084 32.1414 6.88562C37.8033 4.5404 43.8716 3.33333 50 3.33333C62.3767 3.33333 74.2466 8.24998 82.9983 17.0017C91.75 25.7534 96.6666 37.6232 96.6666 50C96.6666 62.3768 91.75 74.2466 82.9983 82.9983C74.2466 91.75 62.3767 96.6667 50 96.6667Z"
        stroke="currentColor"
        strokeWidth="3"
      />
    </svg>
    <h3 className="py-5 text-2xl font-extrabold text-green-500">–£—Å–ø–µ—à–Ω–æ!</h3>
    <p className="text-gray-700 dark:text-gray-300 md:px-4">–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.</p>
    <button
      className="mt-6 py-2 px-4 bg-red-500 rounded-full focus:outline-none text-neutral-100"
      onClick={onReset}
    >
      –í–µ—Ä–Ω—É—Ç—å—Å—è
    </button>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ErrorMessage
const ErrorMessage: React.FC<MessageProps> = ({ onReset }) => (
  <div className="flex flex-col items-center justify-center text-center text-neutral-900 dark:text-neutral-300 rounded-md">
    <svg
      width="97"
      height="97"
      viewBox="0 0 97 97"
      className="text-rose-500"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M27.9995 69C43.6205 53.379 52.3786 44.621 67.9995 29M26.8077 29L67.9995 69M48.2189 95C42.0906 95 36.0222 93.7929 30.3604 91.4477C24.6985 89.1025 19.554 85.6651 15.2206 81.3316C10.8872 76.9982 7.44975 71.8538 5.10454 66.1919C2.75932 60.53 1.55225 54.4617 1.55225 48.3333C1.55225 42.205 2.75932 36.1366 5.10454 30.4748C7.44975 24.8129 10.8872 19.6684 15.2206 15.335C19.554 11.0016 24.6985 7.56418 30.3604 5.21896C36.0222 2.87374 42.0906 1.66667 48.2189 1.66667C60.5957 1.66667 72.4655 6.58333 81.2172 15.335C89.9689 24.0867 94.8856 35.9566 94.8856 48.3333C94.8856 60.71 89.9689 72.5798 81.2172 81.3316C72.4655 90.0833 60.5957 95 48.2189 95Z"
        stroke="currentColor"
        strokeWidth="3"
      />
    </svg>
    <h3 className="py-5 text-2xl font-extrabold text-rose-500">–û—à–∏–±–∫–∞</h3>
    <p className="text-gray-700 dark:text-gray-300 md:px-4">
      –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.
    </p>
    <button
      className="mt-6 py-2 px-4 bg-red-500 rounded-full focus:outline-none text-neutral-100"
      onClick={onReset}
    >
      –í–µ—Ä–Ω—É—Ç—å—Å—è
    </button>
  </div>
);
